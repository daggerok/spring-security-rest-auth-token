buildscript {
	repositories { jcenter() }
	dependencies { classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion" }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "spring-boot"

jar { baseName = "demo" }

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = sourceCompatibility

repositories { jcenter() }

dependencies {
	compile "org.springframework.boot:spring-boot-starter-security",
			"org.springframework.boot:spring-boot-starter-data-jpa",
			"org.springframework.boot:spring-boot-starter-data-rest",
			"org.springframework.boot:spring-boot-starter-mustache",

			"org.springframework.boot:spring-boot-starter-websocket",
			"org.springframework:spring-messaging",

			"org.springframework.boot:spring-boot-starter-remote-shell",
			"org.springframework.boot:spring-boot-starter-actuator",
			"org.springframework.data:spring-data-rest-hal-browser",
			"org.springframework.boot:spring-boot-starter-hateoas",
			"org.springframework.boot:spring-boot-devtools",

			"org.projectlombok:lombok:$lombokVersion"

	runtime "com.h2database:h2"

	testCompile "org.springframework.boot:spring-boot-starter-test",
			"org.springframework.restdocs:spring-restdocs-mockmvc"
}

/**
 * front-end
 */
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files
import java.nio.file.Paths

// gradle build -Pnode="task" // where task: [prod, map, dev]
task npm(type: Exec) {
	def node = project.hasProperty("node") ? project.property("node") : npmDefaultProfile
	def frontendDir = "${project.projectDir}/node"
	def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
	def script = "${frontendDir}/${node}." + (isWindows ? "cmd" : "bash")
	print(script)
	if (Files.notExists(Paths.get(script))) throw new GradleException("file ${script} wasn't found.")

	workingDir frontendDir
	commandLine isWindows ? ["cmd", "/c", script] : ["bash", "-x", script]
}

eclipse {
	classpath {
		containers.remove "org.eclipse.jdt.launching.JRE_CONTAINER"
		containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
	}
}

task wrapper(type: Wrapper) { gradleVersion = gradleVersion }